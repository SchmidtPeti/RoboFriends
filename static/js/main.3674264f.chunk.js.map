{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/Searchbox.js","components/Scroll.js","components/Errorborder.js","App.js","serviceWorker.js","reducers.js","index.js","actions.js","constans.js"],"names":["Card","_ref","id","name","desc","react_default","a","createElement","className","src","concat","alt","Cardlist","robots","cardComp","map","user","i","components_Card","key","style","display","Searchbox","searchfield","searchchange","type","placeholder","padding","border","onChange","ScrollLayout","props","overflow","height","children","Errorborder","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","errorInfo","setState","Component","App","onSearchchange","event","target","value","_this2","fetch","then","response","json","users","_this3","filteredrobots","filter","toLowerCase","includes","components_Searchbox","components_Errorborder","Scroll","components_Cardlist","Boolean","window","location","hostname","match","initialStateSearch","logger","createLogger","rootReducers","combineReducers","requestRobots","dispatch","actions_this","searchRobots","arguments","length","undefined","action","assign","payload","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6PAYgBA,SAXH,SAAAC,GAAkB,IAAhBC,EAAgBD,EAAhBC,GAAGC,EAAaF,EAAbE,KAAKC,EAAQH,EAARG,KACtB,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qDACfH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BR,EAA1B,iBAA6CS,IAAI,WACxDN,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,UAAKJ,GACLE,EAAAC,EAAAC,cAAA,SAAIH,OCYOQ,EAhBE,SAAAX,GAAY,IAAVY,EAAUZ,EAAVY,OACTC,EAAWD,EAAOE,IAAI,SAACC,EAAKC,GAC9B,OACIZ,EAAAC,EAAAC,cAACW,EAAD,CACIC,IAAKF,EACLf,GAAIW,EAAOI,GAAGf,GACdC,KAAMU,EAAOI,GAAGd,KAChBC,KAAMS,EAAOI,GAAGb,SAG5B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,gBAAiBY,MAAO,CAACC,QAAU,sBAC9CP,ICHEQ,EAXG,SAAArB,GAA8BA,EAA5BsB,YAA4B,IAAhBC,EAAgBvB,EAAhBuB,aAC5B,OACAnB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOkB,KAAK,SACZC,YAAY,mBACLN,MAAO,CAACO,QAAQ,OAAOC,OAAQ,mBACtCC,SAAUL,MCEHM,EAPM,SAACC,GAClB,OACI1B,EAAAC,EAAAC,cAAA,OAAKa,MAAO,CAACQ,OAAO,kBAAmBI,SAAS,SAAUC,OAAO,UAChEF,EAAMG,WCaAC,cAhBX,SAAAA,EAAYJ,GAAM,IAAAK,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACdC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMR,KACDY,MAAQ,CACTC,UAAU,GAHAR,iFAMAS,EAAOC,GACrBP,KAAKQ,SAAS,CAACH,UAAU,qCAGzB,OAAGL,KAAKI,MAAMC,SACHvC,EAAAC,EAAAC,cAAA,2DAEJgC,KAAKR,MAAMG,gBAdAc,aC0CXC,cAnCb,SAAAA,IAAa,IAAAb,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAU,IACXb,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAY,GAAAP,KAAAH,QAMFW,eAAiB,SAACC,GAChBf,EAAKW,SAAS,CAACxB,YAAa4B,EAAMC,OAAOC,SANzCjB,EAAKO,MAAM,CACT9B,OAAQ,GACRU,YAAa,IAJJa,mFAUO,IAAAkB,EAAAf,KAChBgB,MAAM,8CAA8CC,KAAK,SAAAC,GAAQ,OAAEA,EAASC,SAAQF,KAAK,SAAAG,GAAK,OAAEL,EAAKP,SAAS,CAAClC,OAAQ8C,uCAGlH,IAAAC,EAAArB,KAEDsB,EADStB,KAAKI,MAAM9B,OACIiD,OAAO,SAAAjD,GACjC,OAAOA,EAAOV,KAAK4D,cAAcC,SAASJ,EAAKjB,MAAMpB,YAAYwC,iBAErE,OACI1D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,0BAEFF,EAAAC,EAAAC,cAAC0D,EAAD,CAAWzC,aAAce,KAAKW,iBAC9B7C,EAAAC,EAAAC,cAAC2D,EAAD,KACA7D,EAAAC,EAAAC,cAAC4D,EAAD,KACA9D,EAAAC,EAAAC,cAAC6D,EAAD,CAAUvD,OAAQgD,cA5BVb,aCKEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+GCfAC,EAAqB,CACvBnD,YAAa,ICSXoD,EAASC,yBACTC,EAAeC,YAAgB,CAACC,cCVT,kBAAM,SAACC,GAChCA,EAAS,CAACvD,KCHwB,2BDIlC8B,MAAM,IACNA,MAAM,8CAA8CC,KAAK,SAAAC,GAAQ,OAAEA,EAASC,SAAQF,KAAK,SAAAG,GAAK,OAAEsB,EAAKlC,SAAS,CAAClC,OAAQ8C,QDOvEuB,aDNxB,WAAwC,IAAvCvC,EAAuCwC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjCT,EAAmBY,EAAcH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GACzD,OAAQG,EAAO7D,MACX,IGV0B,qBHWtB,OAAOY,OAAOkD,OAAO,GAAI5C,EAAM,CAACpB,YAAa+D,EAAOE,UACxD,QACI,OAAO7C,MCEb8C,EAAQC,YAAYb,EAAac,YAAgBC,IAAgBjB,IAEvEkB,IAASC,OACTzF,EAAAC,EAAAC,cAACwF,EAAA,EAAD,CAAUN,MAAOA,GAChBpF,EAAAC,EAAAC,cAACyF,EAAD,OAIEC,SAASC,eAAe,SF0GrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,KAAK,SAAA8C,GACjCA,EAAaC","file":"static/js/main.3674264f.chunk.js","sourcesContent":["import React from 'react';\nconst Card = ({id,name,desc})=>{\n\treturn(\n\t\t<div className='card bg-light-green dib br3 pa3 ma2 grow shadow-5'>\n\t\t<img src={`https://robohash.org/${id}?size=200x200`} alt='Robots' />\n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{desc}</p>\n\t\t\t</div>\t\n\t\t</div>\n\t);\n}\nexport default \tCard;","import React from 'react';\nimport Card from \"./Card\";\n\nconst Cardlist = ({robots})=>{\n    const cardComp = robots.map((user,i)=>{\n        return (\n            <Card\n                key={i}\n                id={robots[i].id}\n                name={robots[i].name}\n                desc={robots[i].desc}\n            />)\n    });\n    return(\n        <div className={'containercard'} style={{display : 'inline !important'}}>\n            {cardComp}\n        </div>\n    );\n}\nexport default Cardlist;","import React from 'react';\nconst Searchbox = ({searchfield,searchchange})=>{\n    return(\n    <div>\n        <input type='search'\n        placeholder='Search robots...'\n               style={{padding:'10px',border: '3px solid black'}}\n        onChange={searchchange}\n        />\n    </div>\n    );\n}\nexport default Searchbox;","import React from 'react';\n\nconst ScrollLayout = (props) =>{\n    return(\n        <div style={{border:\"3px solid black\", overflow:\"scroll\", height:\"800px\"}}>\n        {props.children}\n        </div>\n        )\n}\nexport default ScrollLayout;","import React, {Component} from 'react';\nclass Errorborder extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n    componentDidCatch(error, errorInfo) {\n        this.setState({hasError: true})\n    }\n    render() {\n        if(this.state.hasError){\n            return <h1>Opssz I don't think It's good for your taste.</h1>\n        }\n        return this.props.children;\n    }\n}\nexport default Errorborder;","import React,{Component} from 'react';\nimport './App.css';\nimport Cardlist from \"./components/Cardlist\";\nimport Searchbox from './components/Searchbox';\nimport ScrollLayout from \"./components/Scroll\";\nimport Errorborder from \"./components/Errorborder\";\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state={\n      robots: [],\n      searchfield: ''\n    }\n  }\n  onSearchchange = (event) =>{\n    this.setState({searchfield: event.target.value})\n  }\n  componentDidMount() {\n      fetch('https://jsonplaceholder.typicode.com/users').then(response=>response.json()).then(users=>this.setState({robots: users}))\n  }\n\n  render() {\n    const robots = this.state.robots;\n    const filteredrobots = robots.filter(robots=>{\n        return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n     });\n    return (\n        <div className=\"App\">\n          <header>\n            <h1>RoboFriends</h1>\n          </header>\n          <Searchbox searchchange={this.onSearchchange}/>\n          <Errorborder>\n          <ScrollLayout>\n          <Cardlist robots={filteredrobots}/>\n          </ScrollLayout>\n          </Errorborder>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {CHANGE_SEARCHFIELD,REQUEST_ROBOTS_FAILED,REQUEST_ROBOTS_SUCCESS,REQUEST_ROBOTS_PENDING} from \"./constans\";\n\n\nconst initialStateSearch = {\n    searchfield: ''\n}\n\n\nexport const searchRobots = (state=initialStateSearch,action={}) => {\n    switch (action.type) {\n        case CHANGE_SEARCHFIELD:\n            return Object.assign({}, state,{searchfield: action.payload});\n        default:\n            return state;\n    }\n}\n\n\nconst initialStateRobots = {\n    robots: [],\n    isPending: true\n}\n\nexport const requestRobots = (state=initialStateRobots,action={}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({},state,{isPending: true});\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({},state,{robots: action.payload,isPending:false});\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({},state,{error:action.payload});\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport thunkMiddleware from 'redux-thunk';\nimport {createStore,combineReducers,applyMiddleware} from \"redux\";\nimport {createLogger} from \"redux-logger\";\nimport 'tachyons';\nimport {requestRobots} from \"./actions\";\nimport {searchRobots} from \"./reducers\";\n\nconst logger = createLogger();\nconst rootReducers = combineReducers({requestRobots,searchRobots});\nconst store = createStore(rootReducers,applyMiddleware(thunkMiddleware,logger));\n\nReactDOM.render(\n<Provider store={store}>\n\t<App/>\n</Provider>\n\n\n\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","import {CHANGE_SEARCHFIELD,REQUEST_ROBOTS_FAILED,REQUEST_ROBOTS_SUCCESS,REQUEST_ROBOTS_PENDING} from \"./constans\";\n\nexport const setSearchField = (text) => ({type:CHANGE_SEARCHFIELD,payload:text})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({type: REQUEST_ROBOTS_PENDING})\n    fetch('')\n    fetch('https://jsonplaceholder.typicode.com/users').then(response=>response.json()).then(users=>this.setState({robots: users}))\n}","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\n\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\n\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';"],"sourceRoot":""}